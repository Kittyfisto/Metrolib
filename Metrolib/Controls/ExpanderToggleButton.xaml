<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:controls="clr-namespace:Metrolib.Controls">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/Metrolib;component/Controls/FlatToggleButton.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Geometry x:Key="ChevronDown">
        M7.41,8.58L12,13.17L16.59,8.58L18,10L12,16L6,10L7.41,8.58Z
    </Geometry>

    <Geometry x:Key="ChevronUp">
        M7.41,15.41L12,10.83L16.59,15.41L18,14L12,8L6,14L7.41,15.41Z
    </Geometry>

    <EllipseGeometry x:Key="Circle" Center="12,12" RadiusX="12" RadiusY="12" />

    <Style TargetType="{x:Type controls:ExpanderToggleButton}" BasedOn="{StaticResource {x:Type controls:FlatToggleButton}}">
        <Setter Property="Width" Value="32" />
        <Setter Property="Height" Value="32" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:ExpanderToggleButton}">
                    <Grid>
                        <Viewbox Margin="{TemplateBinding Padding}">
                            <Canvas Width="24" Height="24">
                                <!-- We have a separate hitbox because we want ONE defined hitbox for mouse/touch interaction -->
                                <Path x:Name="PART_Hitbox" Fill="Transparent" Data="{StaticResource Circle}"/>
                                <!-- The circle has an identical geometry than the hitbox, but it is only visible when hovered over -->
                                <Path x:Name="PART_Circle" Fill="{TemplateBinding Background}" Visibility="Hidden" Data="{StaticResource Circle}"/>
                                <!-- The actual chevron that shows the expanded state -->
                                <Path x:Name="PART_Chevron" />
                            </Canvas>
                        </Viewbox>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!-- ChevronUp/Down depending on IsChecked -->
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Data" TargetName="PART_Chevron" Value="{StaticResource ChevronDown}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter Property="Data" TargetName="PART_Chevron" Value="{StaticResource ChevronUp}" />
                        </Trigger>

                        <!-- Chevron and Circle color based on IsSelected -->
                        <Trigger Property="controls:Properties.IsInverted" Value="True">
                            <Setter Property="Fill" TargetName="PART_Chevron" Value="{Binding InvertedForeground,RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter Property="Stroke" TargetName="PART_Circle" Value="{Binding InvertedForeground,RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                        <Trigger Property="controls:Properties.IsInverted" Value="False">
                            <Setter Property="Fill" TargetName="PART_Chevron" Value="{Binding Foreground,RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter Property="Stroke" TargetName="PART_Circle" Value="{Binding Foreground,RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>

                        <!-- Color of icon when disabled -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="PART_Chevron" Property="Fill" Value="{StaticResource BorderBrushDisabled}" />
                        </Trigger>
                        
                        <!-- The circle is only visible when the user hovers over it -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Visibility" TargetName="PART_Circle" Value="Visible" />
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:controls="clr-namespace:Metrolib.Controls">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/Metrolib;component/Controls/Base/FlatButton.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Geometry x:Key="Export">
        M6,2C4.89,2 4,2.9 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M13,3.5L18.5,9H13M8.93,12.22H16V19.29L13.88,17.17L11.05,20L8.22,17.17L11.05,14.35
    </Geometry>

    <Style TargetType="{x:Type controls:ExportButton}" BasedOn="{StaticResource DefaultFlatButtonStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:ExportButton}">
                    <Grid x:Name="PART_MainGrid"
                          Background="{TemplateBinding Background}"
                          Margin="{TemplateBinding Margin}">
                        <Viewbox Margin="{TemplateBinding Padding}">
                            <Canvas Width="24" Height="24">
                                <Path x:Name="PART_Icon" Data="{StaticResource Export}" />
                            </Canvas>
                        </Viewbox>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!-- Filter color based on IsInverted -->
                        <Trigger Property="IsInverted" Value="True">
                            <Setter Property="Fill" TargetName="PART_Icon"
                                    Value="{Binding InvertedForeground, RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                        <Trigger Property="IsInverted" Value="False">
                            <Setter Property="Fill" TargetName="PART_Icon"
                                    Value="{Binding Foreground, RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                        <!-- Background when mouse over -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="PART_MainGrid" Property="Background"
                                    Value="{Binding HoveredBackground,RelativeSource={RelativeSource TemplatedParent}}">
                            </Setter>
                        </Trigger>
                        <!-- Background when pressed -->
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="PART_MainGrid" Property="Background"
                                    Value="{Binding PressedBackground, RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                        <!-- Color of icon when disabled -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="PART_Icon" Property="Fill" Value="{StaticResource BorderBrushDisabled}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>